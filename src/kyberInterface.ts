/**
 * The Kyber interface.
 */
export interface KyberInterface {
  /**
   * Generates a keypair [publicKey, privateKey].
   *
   * If an error occurred, throws {@link KyberError}.
   *
   * @returns A kaypair [publicKey, privateKey].
   * @throws {@link KyberError}
   *
   * @example Generates a {@link Kyber768} keypair.
   *
   * ```ts
   * // import { Kyber768 } from "crystals-kyber-js"; // Node.js
   * import { Kyber768 } from "http://deno.land/x/crystals_kyber/mod.ts"; // Deno
   *
   * const kyber = new Kyber768();
   * const [pk, sk] = await kyber.generateKeyPair();
   * ```
   */
  generateKeyPair(): Promise<[Uint8Array, Uint8Array]>;

  /**
   * Derives a keypair [publicKey, privateKey] deterministically from a 64-octet seed.
   *
   * If an error occurred, throws {@link KyberError}.
   *
   * @param seed A 64-octet seed for the deterministic key generation.
   * @returns A kaypair [publicKey, privateKey].
   * @throws {@link KyberError}
   *
   * @example Derives a {@link Kyber768} keypair deterministically.
   *
   * ```ts
   * // import { Kyber768 } from "crystals-kyber-js"; // Node.js
   * import { Kyber768 } from "http://deno.land/x/crystals_kyber/mod.ts"; // Deno
   *
   * const kyber = new Kyber768();
   * const seed = new Uint8Array(64);
   * globalThis.crypto.getRandomValues(seed);
   * const [pk, sk] = await kyber.deriveKeyPair(seed);
   * ```
   */
  deriveKeyPair(seed: Uint8Array): Promise<[Uint8Array, Uint8Array]>;

  /**
   * Generates a shared secret from the encapsulated ciphertext and the private key.
   *
   * If an error occurred, throws {@link KyberError}.
   *
   * @param pk A public key.
   * @param seed An optional 32-octet seed for the deterministic shared secret generation.
   * @returns A ciphertext (encapsulated public key) and a shared secret.
   * @throws {@link KyberError}
   *
   * @example The {@link Kyber768} encapsulation.
   *
   * ```ts
   * // import { Kyber768 } from "crystals-kyber-js"; // Node.js
   * import { Kyber768 } from "http://deno.land/x/crystals_kyber/mod.ts"; // Deno
   *
   * const kyber = new Kyber768();
   * const [pk, sk] = await kyber.generateKeyPair();
   * const [ct, ss] = await kyber.encap(pk);
   * ```
   */
  encap(pk: Uint8Array, seed?: Uint8Array): Promise<[Uint8Array, Uint8Array]>;

  /**
   * Generates a ciphertext for the public key and a shared secret.
   *
   * If an error occurred, throws {@link KyberError}.
   *
   * @param ct A ciphertext generated by {@link encap}.
   * @param sk A private key.
   * @returns A shared secret.
   * @throws {@link KyberError}
   *
   * @example The {@link Kyber768} decapsulation.
   *
   * ```ts
   * // import { Kyber768 } from "crystals-kyber-js"; // Node.js
   * import { Kyber768 } from "http://deno.land/x/crystals_kyber/mod.ts"; // Deno
   *
   * const kyber = new Kyber768();
   * const [pk, sk] = await kyber.generateKeyPair();
   * const [ct, ssS] = await kyber.encap(pk);
   * const ssR = await kyber.decap(ct, sk);
   * console.assert(ssS === ssR, "The two shared secrets must match.");
   * ```
   */
  decap(ct: Uint8Array, sk: Uint8Array): Promise<Uint8Array>;
}
